package de.rwth.armin.modeling.autopilot.navigation.test;

import de.rwth.armin.modeling.autopilot.navigation.Navigator;

component NavigatorWrapper1 {
  port
    in Q (0 : oo) e01,
    in Q (0 : oo) e02,
    in Q (0 : oo) e12,
    in Q (0 : oo) e13,
    in Q (0 : oo) e23,
    in Q (0 : oo) e24,
    in Q (0 : oo) e34,
    in Q (0 : oo) e35,
    in Q (0 : oo) e45,

    out Z (0 : 10000) path_length,
    out Q path_gpsLat0,
    out Q path_gpsLat1,
    out Q path_gpsLat2,
    out Q path_gpsLat3,
    out Q path_gpsLat4,
    out Q path_gpsLon0,
    out Q path_gpsLon1,
    out Q path_gpsLon2,
    out Q path_gpsLon3,
    out Q path_gpsLon4;

  instance ComposeInputs1 composeInputs;
  instance Navigator navigator;
  instance DecomposeOutputs1 decomposeOutputs;

  connect e01 -> composeInputs.e01;
  connect e02 -> composeInputs.e02;
  connect e12 -> composeInputs.e12;
  connect e13 -> composeInputs.e13;
  connect e23 -> composeInputs.e23;
  connect e24 -> composeInputs.e24;
  connect e34 -> composeInputs.e34;
  connect e35 -> composeInputs.e35;
  connect e45 -> composeInputs.e45;

  connect composeInputs.currentGpsLat -> navigator.currentGpsLat;
  connect composeInputs.currentGpsLon -> navigator.currentGpsLon;
  connect composeInputs.goalNodeId -> navigator.goalNodeId;
  connect composeInputs.addNodes_length -> navigator.addNodes_length;
  connect composeInputs.addNodes_id -> navigator.addNodes_id;
  connect composeInputs.addNodes_gpsLat -> navigator.addNodes_gpsLat;
  connect composeInputs.addNodes_gpsLon -> navigator.addNodes_gpsLon;
  connect composeInputs.removeNodes_length -> navigator.removeNodes_length;
  connect composeInputs.removeNodes_id -> navigator.removeNodes_id;
  connect composeInputs.addOrUpdateEdges_length -> navigator.addOrUpdateEdges_length;
  connect composeInputs.addOrUpdateEdges_fromNodeId -> navigator.addOrUpdateEdges_fromNodeId;
  connect composeInputs.addOrUpdateEdges_toNodeId -> navigator.addOrUpdateEdges_toNodeId;
  connect composeInputs.addOrUpdateEdges_cost -> navigator.addOrUpdateEdges_cost;
  connect composeInputs.removeEdges_length -> navigator.removeEdges_length;
  connect composeInputs.removeEdges_fromNodeId -> navigator.removeEdges_fromNodeId;
  connect composeInputs.removeEdges_toNodeId -> navigator.removeEdges_toNodeId;

  connect navigator.path_length -> decomposeOutputs.path_length;
  connect navigator.path_gpsLat -> decomposeOutputs.path_gpsLat;
  connect navigator.path_gpsLon -> decomposeOutputs.path_gpsLon;

  connect navigator.path_length -> path_length;
  connect decomposeOutputs.path_gpsLat0 -> path_gpsLat0;
  connect decomposeOutputs.path_gpsLat1 -> path_gpsLat1;
  connect decomposeOutputs.path_gpsLat2 -> path_gpsLat2;
  connect decomposeOutputs.path_gpsLat3 -> path_gpsLat3;
  connect decomposeOutputs.path_gpsLat4 -> path_gpsLat4;
  connect decomposeOutputs.path_gpsLon0 -> path_gpsLon0;
  connect decomposeOutputs.path_gpsLon1 -> path_gpsLon1;
  connect decomposeOutputs.path_gpsLon2 -> path_gpsLon2;
  connect decomposeOutputs.path_gpsLon3 -> path_gpsLon3;
  connect decomposeOutputs.path_gpsLon4 -> path_gpsLon4;
}
